# Doc Referencia https://docs.aws.amazon.com/pt_br/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Stack recursos IT

Parameters:
  WriterQueueName:
    Type: String
    Default: WriterQueue
  AccountTableName:
    Type: String
    Default: DataTable
  LogTableName:
    Type: String
    Default: LogTable
  RoleArn:
    Type: String
    Description: ARN of the IAM role for Lambda functions
  BucketName:
    Type: String
    Default: data-bucket-471112928175

Globals:
  Function:
    Timeout: 120
    MemorySize: 128
    Runtime: provided.al2023
    Architectures:
      - x86_64

Resources:
  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 170
      QueueName: DeadLetterQueue
      MessageRetentionPeriod: 300

  WriterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref WriterQueueName
      VisibilityTimeout: 170
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 1

  AccountTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref AccountTableName
      AttributeDefinitions:
        - AttributeName: AccountID
          AttributeType: S
      KeySchema:
        - AttributeName: AccountID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  
  LogTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref LogTableName
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S
      KeySchema:
        - AttributeName: ID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ErrorHandlerFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: src/error_handler/
      Handler: bootstrap
      Role: !Ref RoleArn
      Environment:
        Variables:
          TABLE_NAME: !Ref LogTableName
          ENV: cloud
      Events:
        DQLEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt DeadLetterQueue.Arn
            BatchSize: 10
            Enabled: true
            FunctionResponseTypes:
            - ReportBatchItemFailures
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref LogTableName
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'
            - Effect: Allow
              Action:
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
              Resource: !GetAtt DeadLetterQueue.Arn

  TransformerFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: src/transformer/
      Handler: bootstrap
      Role: !Ref RoleArn
      Environment:
        Variables:
          ENV: cloud
          QUEUE_URL: !GetAtt WriterQueue.QueueUrl
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref DataBucket
            Events: s3:ObjectCreated:*    
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !Ref WriterQueue
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'

  WriterFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: src/writer/
      AutoPublishAlias: live
      DeploymentPreference:
        Type: Canary10Percent5Minutes
        Alarms:
          - !Ref AliasErrorMetricGreaterThanZeroAlarm
          - !Ref LatestVersionErrorMetricGreaterThanZeroAlarm
        Role: !Ref RoleArn
      Handler: bootstrap
      Role: !Ref RoleArn
      Environment:
        Variables:
          TABLE_NAME: !Ref AccountTableName
          ENV: cloud
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt WriterQueue.Arn
            BatchSize: 10
            Enabled: true
            FunctionResponseTypes:
            - ReportBatchItemFailures
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref AccountTableName
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'
            - Effect: Allow
              Action:
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
              Resource: !GetAtt WriterQueue.Arn

  AliasErrorMetricGreaterThanZeroAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: Lambda Function Error > 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: Resource
          Value: !Sub "${WriterFunction}:live"
        - Name: FunctionName
          Value: !Ref WriterFunction
      EvaluationPeriods: 2
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0

  LatestVersionErrorMetricGreaterThanZeroAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: Lambda Function Error > 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: Resource
          Value: !Sub "${WriterFunction}:live"
        - Name: FunctionName
          Value: !Ref WriterFunction
        - Name: ExecutedVersion
          Value: !GetAtt WriterFunction.Version.Version
      EvaluationPeriods: 2
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0

  ApiGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: dev
    Auth:
      DefaultAuthorizer: NONE

# Integration API Gateway -> SQS
  SqsIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: AWS_PROXY
      IntegrationSubtype: SQS-SendMessage
      CredentialsArn: !Ref RoleArn
      RequestParameters:
        QueueUrl: !Ref WriterQueue
        MessageBody: "$request.body"
      PayloadFormatVersion: "1.0"

# Rota POST API Gateway
  PostRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: POST /writer
      Target: !Sub 'integrations/${SqsIntegration}'
